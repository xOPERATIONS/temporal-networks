var searchIndex={};
searchIndex["temporal_networks"] = {"doc":"Temporal Networks Temporal Networks for fast and flexible…","i":[[5,"install","temporal_networks","Recommended to run once when this package imported in JS…",null,[[],[["result",["jsvalue"]],["jsvalue"]]]],[5,"__wasm_bindgen_generated_install","","Recommended to run once when this package imported in JS…",null,[[]]],[0,"algorithms","","",null,null],[5,"floyd_warshall","temporal_networks::algorithms","Similar to Python's networkx Floyd Warshall…",null,[[["digraphmap"]],[["result",["btreemap","string"]],["btreemap",["f64"]],["string"]]]],[0,"interval","temporal_networks","",null,null],[3,"Interval","temporal_networks::interval","An interval represents a context-agnostic inclusive…",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[11,"new","","Create a new Interval",0,[[["f64"]],["interval"]]],[11,"from_vec","","Get an interval from a vector",0,[[["vec",["f64"]],["f64"]],["interval"]]],[11,"to_json","","Convert the interval to JSON `[lower, upper]`",0,[[["self"]],["jsvalue"]]],[11,"lower","","The lower bound of the range",0,[[["self"]],["f64"]]],[11,"upper","","The upper bound of the range",0,[[["self"]],["f64"]]],[11,"contains","","Whether or not a point in time falls within a range",0,[[["f64"],["self"]],["bool"]]],[11,"is_valid","","A check that ensures the lower bound is less than the…",0,[[["self"]],["bool"]]],[11,"converged","","Whether or not the interval has converged to a time",0,[[["self"]],["bool"]]],[11,"union","","Union these intervals",0,[[["interval"],["self"]],["interval"]]],[0,"schedule","temporal_networks","Schedule Defines an API designed to be exported to WASM…",null,null],[3,"Episode","temporal_networks::schedule","An Episode represents a logical action that occurs over a…",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"Schedule","","A `Schedule` orchestrates events and the timing…",null,null],[6,"EventID","","An ID representing an event in the Schedule",null,null],[11,"start","","Represents the start of the Episode",1,[[["self"]],["eventid"]]],[11,"end","","Represents the end of the Episode",1,[[["self"]],["eventid"]]],[11,"new","","",2,[[],["schedule"]]],[11,"root","","Get the first event in the Schedule. Found implicitly…",2,[[["self"]],[["eventid"],["option",["eventid"]]]]],[11,"order","","List event IDs in chronological order",2,[[["self"]],[["vec",["eventid"]],["eventid"]]]],[11,"create_event","","Low-level API for creating nodes in the graph. Advanced…",2,[[["self"]],["eventid"]]],[11,"add_episode","","Create a new Episode and add it to this Schedule",2,[[["self"],["vec",["f64"]],["option",["vec"]]],["episode"]]],[11,"get_duration","","Get the controllable duration of an Episode",2,[[["episode"],["self"]],["interval"]]],[11,"compile","","Compile the Schedule into a dispatchable form. A…",2,[[["self"]],[["result",["jsvalue"]],["jsvalue"]]]],[11,"commit_event","","Low-level API for marking an event complete. Advanced use…",2,[[["self"],["eventid"],["f64"]],[["result",["jsvalue"]],["jsvalue"]]]],[11,"complete_episode","","Mark an Episode complete to update the schedule to…",2,[[["episode"],["self"],["f64"]],[["result",["jsvalue"]],["jsvalue"]]]],[11,"window","","Get the execution window of an Event",2,[[["self"],["eventid"]],[["interval"],["jsvalue"],["result",["interval","jsvalue"]]]]],[11,"interval","","Get the interval between two events",2,[[["self"],["eventid"]],[["interval"],["jsvalue"],["result",["interval","jsvalue"]]]]],[11,"event_distance","","Low-level API to get the directional distance between two…",2,[[["self"],["eventid"]],[["result",["jsvalue","jsvalue"]],["jsvalue"]]]],[11,"update_interval","","",2,[[["vec",["f64"]],["self"],["eventid"],["f64"]]]],[11,"add_constraint","","Add a constraint between the start or end of two events.…",2,[[["vec",["f64"]],["self"],["eventid"],["option",["vec"]]],[["result",["jsvalue"]],["jsvalue"]]]],[11,"remove_constraint","","Remove the constraint between two events. Only errs if an…",2,[[["self"],["eventid"]],[["result",["jsvalue"]],["jsvalue"]]]],[11,"remove_constraints","","Remove all constraints between two episodes",2,[[["episode"],["self"]],[["result",["jsvalue"]],["jsvalue"]]]],[11,"free_episode","","Remove any constraints around this Episode, except the…",2,[[["episode"],["self"]],[["result",["jsvalue"]],["jsvalue"]]]],[11,"from","temporal_networks::interval","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"return_abi","","",0,[[]]],[11,"from","temporal_networks::schedule","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"return_abi","","",1,[[]]],[11,"equivalent","","",1,[[["k"],["self"]],["bool"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"return_abi","","",2,[[]]],[11,"clone","temporal_networks::interval","",0,[[["self"]],["interval"]]],[11,"clone","temporal_networks::schedule","",1,[[["self"]],["episode"]]],[11,"default","temporal_networks::interval","",0,[[],["interval"]]],[11,"default","temporal_networks::schedule","",1,[[],["episode"]]],[11,"default","","",2,[[],["schedule"]]],[11,"cmp","","",1,[[["episode"],["self"]],["ordering"]]],[11,"eq","temporal_networks::interval","",0,[[["interval"],["self"]],["bool"]]],[11,"ne","","",0,[[["interval"],["self"]],["bool"]]],[11,"eq","temporal_networks::schedule","",1,[[["episode"],["self"]],["bool"]]],[11,"ne","","",1,[[["episode"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["episode"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["episode"],["self"]],["bool"]]],[11,"le","","",1,[[["episode"],["self"]],["bool"]]],[11,"gt","","",1,[[["episode"],["self"]],["bool"]]],[11,"ge","","",1,[[["episode"],["self"]],["bool"]]],[11,"fmt","temporal_networks::interval","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","temporal_networks::schedule","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","temporal_networks::interval","",0,[[["formatter"],["self"]],["result"]]],[11,"sub","","",0,[[["interval"]],["interval"]]],[11,"add","","create a new interval from the addition of two other…",0,[[["interval"]],["interval"]]],[11,"neg","","",0,[[],["interval"]]],[11,"add_assign","","",0,[[["self"],["interval"]]]],[11,"sub_assign","","",0,[[["self"],["interval"]]]],[11,"bitand","","",0,[[["interval"]],["interval"]]],[11,"bitand_assign","","",0,[[["self"],["interval"]]]],[11,"ref_from_abi","","",0,[[]]],[11,"ref_from_abi","temporal_networks::schedule","",1,[[]]],[11,"ref_from_abi","","",2,[[]]],[11,"from_abi","temporal_networks::interval","",0,[[["u32"]],["self"]]],[11,"from_abi","temporal_networks::schedule","",1,[[["u32"]],["self"]]],[11,"from_abi","","",2,[[["u32"]],["self"]]],[11,"into_abi","temporal_networks::interval","",0,[[],["u32"]]],[11,"into_abi","temporal_networks::schedule","",1,[[],["u32"]]],[11,"into_abi","","",2,[[],["u32"]]],[11,"describe","temporal_networks::interval","",0,[[]]],[11,"describe","temporal_networks::schedule","",1,[[]]],[11,"describe","","",2,[[]]],[11,"is_none","temporal_networks::interval","",0,[[],["bool"]]],[11,"is_none","temporal_networks::schedule","",1,[[],["bool"]]],[11,"is_none","","",2,[[],["bool"]]],[11,"none","temporal_networks::interval","",0,[[]]],[11,"none","temporal_networks::schedule","",1,[[]]],[11,"none","","",2,[[]]],[11,"ref_mut_from_abi","temporal_networks::interval","",0,[[]]],[11,"ref_mut_from_abi","temporal_networks::schedule","",1,[[]]],[11,"ref_mut_from_abi","","",2,[[]]],[11,"serialize","temporal_networks::interval","",0,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]]],"p":[[3,"Interval"],[3,"Episode"],[3,"Schedule"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);
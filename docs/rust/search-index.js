var N=null,E="",T="t",U="u",searchIndex={};
var R=["jsvalue","Recommended to run once when this package imported in JS…","result","btreemap","string","temporal_networks","interval","option","period","temporal_networks::interval","temporal_networks::plan","to_owned","clone_into","to_string","try_from","try_into","borrow_mut","return_abi","type_id","default","formatter","ref_from_abi","from_abi","into_abi","describe","is_none","ref_mut_from_abi","Interval"];

searchIndex["temporal_networks"]={"doc":"Temporal Networks Temporal Networks for fast and flexible…","i":[[5,"install",R[5],R[1],N,[[],[[R[2],[R[0]]],[R[0]]]]],[5,"__wasm_bindgen_generated_install",E,R[1],N,[[]]],[0,"algorithms",E,E,N,N],[5,"floyd_warshall","temporal_networks::algorithms","Similar to Python's networkx Floyd Warshall…",N,[[["digraphmap"]],[[R[4]],[R[3],["f64"]],[R[2],[R[3],R[4]]]]]],[0,R[6],R[5],E,N,N],[3,R[27],R[9],"An interval represents a context-agnostic inclusive…",N,N],[12,"0",E,E,0,N],[12,"1",E,E,0,N],[11,"new",E,"Create a new Interval",0,[[["f64"]],[R[6]]]],[11,"from_vec",E,"Get an interval from a vector",0,[[["f64"],["vec",["f64"]]],[R[6]]]],[11,"to_json",E,"Convert the interval to JSON `[lower, upper]`",0,[[["self"]],[R[0]]]],[11,"lower",E,"The lower bound of the range",0,[[["self"]],["f64"]]],[11,"upper",E,"The upper bound of the range",0,[[["self"]],["f64"]]],[11,"contains",E,"Whether or not a point in time falls within a range",0,[[["f64"],["self"]],["bool"]]],[11,"is_valid",E,"A check that ensures the lower bound is less than the…",0,[[["self"]],["bool"]]],[11,"converged",E,"Whether or not the interval has converged to a time",0,[[["self"]],["bool"]]],[0,"plan",R[5],"Plan Defines an API designed to be exported to WASM that…",N,N],[3,"Period",R[10],"An Period represents a logical action that occurs over a…",N,N],[12,"0",E,E,1,N],[12,"1",E,E,1,N],[3,"Plan",E,"A `Plan` orchestrates events and the timing constraints…",N,N],[11,"name",E,"Represents the unique identifier of the Period",1,[[["self"]],[R[4]]]],[11,"start",E,"Represents the start of the Period",1,[[["self"]],["i32"]]],[11,"end",E,"Represents the end of the Period",1,[[["self"]],["i32"]]],[11,"new",E,E,2,[[],["plan"]]],[11,"root",E,"Get the first event in the plan. Found implicitly based on…",2,[[["self"]],[[R[7],["i32"]],["i32"]]]],[11,"create_event",E,"Low-level API for creating nodes in the graph. Advanced…",2,[[["self"],[R[4]]],["i32"]]],[11,"add_period",E,"Create a new Period and add it to this plan. The…",2,[[[R[4]],[R[7],["vec"]],["self"],["vec",["f64"]]],[R[8]]]],[11,"get_duration",E,"Get the controllable duration of an Period",2,[[[R[8]],["self"]],[R[6]]]],[11,"compile",E,"Compile the plan into a dispatchable form. A dispatchable…",2,[[["self"]],[[R[2],[R[0]]],[R[0]]]]],[11,"commit_event",E,"Low-level API for marking an event complete. Advanced use…",2,[[["self"],["f64"],["i32"]],[[R[2],[R[0]]],[R[0]]]]],[11,"complete_period",E,"Mark an Period complete to update the schedule to…",2,[[["self"],[R[8]],["f64"]],[[R[2],[R[0]]],[R[0]]]]],[11,"window",E,"Get the execution window of an Event",2,[[["self"],["i32"]],[[R[0]],[R[2],[R[6],R[0]]],[R[6]]]]],[11,R[6],E,"Get the interval between two events",2,[[["self"],["i32"]],[[R[0]],[R[2],[R[6],R[0]]],[R[6]]]]],[11,"event_distance",E,"Low-level API to get the directional distance between two…",2,[[["self"],["i32"]],[[R[0]],[R[2],[R[0],R[0]]]]]],[11,"update_interval",E,E,2,[[["self"],[R[6]],["i32"]]]],[11,"add_constraint",E,"Add a constraint between the start or end of two events.…",2,[[["i32"],[R[7],["vec"]],["self"],["vec",["f64"]]],[[R[2],[R[0]]],[R[0]]]]],[11,"remove_constraint",E,E,2,[[]]],[11,"remove_constraints",E,E,2,[[]]],[11,"into",R[9],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[11],E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"],[T]]]],[11,R[13],E,E,0,[[["self"]],[R[4]]]],[11,R[14],E,E,0,[[[U]],[R[2]]]],[11,R[15],E,E,0,[[],[R[2]]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],["typeid"]]],[11,R[17],E,E,0,[[]]],[11,"into",R[10],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[11],E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"],[T]]]],[11,R[13],E,E,1,[[["self"]],[R[4]]]],[11,R[14],E,E,1,[[[U]],[R[2]]]],[11,R[15],E,E,1,[[],[R[2]]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],["typeid"]]],[11,R[17],E,E,1,[[]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[14],E,E,2,[[[U]],[R[2]]]],[11,R[15],E,E,2,[[],[R[2]]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],["typeid"]]],[11,R[17],E,E,2,[[]]],[11,"clone",R[9],E,0,[[["self"]],[R[6]]]],[11,"clone",R[10],E,1,[[["self"]],[R[8]]]],[11,R[19],R[9],E,0,[[],[R[6]]]],[11,R[19],R[10],E,1,[[],[R[8]]]],[11,R[19],E,E,2,[[],["plan"]]],[11,"eq",R[9],E,0,[[["self"],[R[6]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[6]]],["bool"]]],[11,"fmt",E,E,0,[[[R[20]],["self"]],[R[2]]]],[11,"fmt",R[10],E,1,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",R[9],E,0,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",R[10],E,1,[[["self"],[R[20]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[2]]]],[11,"sub",R[9],E,0,[[[R[6]]],[R[6]]]],[11,"add",E,"create a new interval from the addition of two other…",0,[[[R[6]]],[R[6]]]],[11,"neg",E,E,0,[[],[R[6]]]],[11,"add_assign",E,E,0,[[["self"],[R[6]]]]],[11,"sub_assign",E,E,0,[[["self"],[R[6]]]]],[11,"bitand",E,E,0,[[[R[6]]],[R[6]]]],[11,"bitand_assign",E,E,0,[[["self"],[R[6]]]]],[11,R[21],E,E,0,[[]]],[11,R[21],R[10],E,1,[[]]],[11,R[21],E,E,2,[[]]],[11,R[22],R[9],E,0,[[["u32"]],["self"]]],[11,R[22],R[10],E,1,[[["u32"]],["self"]]],[11,R[22],E,E,2,[[["u32"]],["self"]]],[11,R[23],R[9],E,0,[[],["u32"]]],[11,R[23],R[10],E,1,[[],["u32"]]],[11,R[23],E,E,2,[[],["u32"]]],[11,R[24],R[9],E,0,[[]]],[11,R[24],R[10],E,1,[[]]],[11,R[24],E,E,2,[[]]],[11,R[25],R[9],E,0,[[],["bool"]]],[11,R[25],R[10],E,1,[[],["bool"]]],[11,R[25],E,E,2,[[],["bool"]]],[11,"none",R[9],E,0,[[]]],[11,"none",R[10],E,1,[[]]],[11,"none",E,E,2,[[]]],[11,R[26],R[9],E,0,[[]]],[11,R[26],R[10],E,1,[[]]],[11,R[26],E,E,2,[[]]],[11,"serialize",R[9],E,0,[[["self"],["__s"]],[R[2]]]],[11,"deserialize",E,E,0,[[["__d"]],[R[2]]]]],"p":[[3,R[27]],[3,"Period"],[3,"Plan"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);